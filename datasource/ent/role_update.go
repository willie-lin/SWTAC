// Code generated by ent, DO NOT EDIT.

package ent

import (
	"SWTAC/datasource/ent/predicate"
	"SWTAC/datasource/ent/role"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoleUpdate) SetUpdatedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetCreator sets the "creator" field.
func (ru *RoleUpdate) SetCreator(s string) *RoleUpdate {
	ru.mutation.SetCreator(s)
	return ru
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableCreator(s *string) *RoleUpdate {
	if s != nil {
		ru.SetCreator(*s)
	}
	return ru
}

// ClearCreator clears the value of the "creator" field.
func (ru *RoleUpdate) ClearCreator() *RoleUpdate {
	ru.mutation.ClearCreator()
	return ru
}

// SetEditor sets the "editor" field.
func (ru *RoleUpdate) SetEditor(s string) *RoleUpdate {
	ru.mutation.SetEditor(s)
	return ru
}

// SetNillableEditor sets the "editor" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableEditor(s *string) *RoleUpdate {
	if s != nil {
		ru.SetEditor(*s)
	}
	return ru
}

// ClearEditor clears the value of the "editor" field.
func (ru *RoleUpdate) ClearEditor() *RoleUpdate {
	ru.mutation.ClearEditor()
	return ru
}

// SetDeleted sets the "deleted" field.
func (ru *RoleUpdate) SetDeleted(f float64) *RoleUpdate {
	ru.mutation.ResetDeleted()
	ru.mutation.SetDeleted(f)
	return ru
}

// AddDeleted adds f to the "deleted" field.
func (ru *RoleUpdate) AddDeleted(f float64) *RoleUpdate {
	ru.mutation.AddDeleted(f)
	return ru
}

// SetParentID sets the "parent_id" field.
func (ru *RoleUpdate) SetParentID(i int) *RoleUpdate {
	ru.mutation.ResetParentID()
	ru.mutation.SetParentID(i)
	return ru
}

// AddParentID adds i to the "parent_id" field.
func (ru *RoleUpdate) AddParentID(i int) *RoleUpdate {
	ru.mutation.AddParentID(i)
	return ru
}

// SetCode sets the "code" field.
func (ru *RoleUpdate) SetCode(s string) *RoleUpdate {
	ru.mutation.SetCode(s)
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetIntro sets the "intro" field.
func (ru *RoleUpdate) SetIntro(s string) *RoleUpdate {
	ru.mutation.SetIntro(s)
	return ru
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoleUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoleUpdate) check() error {
	if v, ok := ru.mutation.Creator(); ok {
		if err := role.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "Role.creator": %w`, err)}
		}
	}
	return nil
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Creator(); ok {
		_spec.SetField(role.FieldCreator, field.TypeString, value)
	}
	if ru.mutation.CreatorCleared() {
		_spec.ClearField(role.FieldCreator, field.TypeString)
	}
	if value, ok := ru.mutation.Editor(); ok {
		_spec.SetField(role.FieldEditor, field.TypeString, value)
	}
	if ru.mutation.EditorCleared() {
		_spec.ClearField(role.FieldEditor, field.TypeString)
	}
	if value, ok := ru.mutation.Deleted(); ok {
		_spec.SetField(role.FieldDeleted, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedDeleted(); ok {
		_spec.AddField(role.FieldDeleted, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.ParentID(); ok {
		_spec.SetField(role.FieldParentID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedParentID(); ok {
		_spec.AddField(role.FieldParentID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Intro(); ok {
		_spec.SetField(role.FieldIntro, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoleUpdateOne) SetUpdatedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetCreator sets the "creator" field.
func (ruo *RoleUpdateOne) SetCreator(s string) *RoleUpdateOne {
	ruo.mutation.SetCreator(s)
	return ruo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableCreator(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetCreator(*s)
	}
	return ruo
}

// ClearCreator clears the value of the "creator" field.
func (ruo *RoleUpdateOne) ClearCreator() *RoleUpdateOne {
	ruo.mutation.ClearCreator()
	return ruo
}

// SetEditor sets the "editor" field.
func (ruo *RoleUpdateOne) SetEditor(s string) *RoleUpdateOne {
	ruo.mutation.SetEditor(s)
	return ruo
}

// SetNillableEditor sets the "editor" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableEditor(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetEditor(*s)
	}
	return ruo
}

// ClearEditor clears the value of the "editor" field.
func (ruo *RoleUpdateOne) ClearEditor() *RoleUpdateOne {
	ruo.mutation.ClearEditor()
	return ruo
}

// SetDeleted sets the "deleted" field.
func (ruo *RoleUpdateOne) SetDeleted(f float64) *RoleUpdateOne {
	ruo.mutation.ResetDeleted()
	ruo.mutation.SetDeleted(f)
	return ruo
}

// AddDeleted adds f to the "deleted" field.
func (ruo *RoleUpdateOne) AddDeleted(f float64) *RoleUpdateOne {
	ruo.mutation.AddDeleted(f)
	return ruo
}

// SetParentID sets the "parent_id" field.
func (ruo *RoleUpdateOne) SetParentID(i int) *RoleUpdateOne {
	ruo.mutation.ResetParentID()
	ruo.mutation.SetParentID(i)
	return ruo
}

// AddParentID adds i to the "parent_id" field.
func (ruo *RoleUpdateOne) AddParentID(i int) *RoleUpdateOne {
	ruo.mutation.AddParentID(i)
	return ruo
}

// SetCode sets the "code" field.
func (ruo *RoleUpdateOne) SetCode(s string) *RoleUpdateOne {
	ruo.mutation.SetCode(s)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetIntro sets the "intro" field.
func (ruo *RoleUpdateOne) SetIntro(s string) *RoleUpdateOne {
	ruo.mutation.SetIntro(s)
	return ruo
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoleUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoleUpdateOne) check() error {
	if v, ok := ruo.mutation.Creator(); ok {
		if err := role.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "Role.creator": %w`, err)}
		}
	}
	return nil
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Creator(); ok {
		_spec.SetField(role.FieldCreator, field.TypeString, value)
	}
	if ruo.mutation.CreatorCleared() {
		_spec.ClearField(role.FieldCreator, field.TypeString)
	}
	if value, ok := ruo.mutation.Editor(); ok {
		_spec.SetField(role.FieldEditor, field.TypeString, value)
	}
	if ruo.mutation.EditorCleared() {
		_spec.ClearField(role.FieldEditor, field.TypeString)
	}
	if value, ok := ruo.mutation.Deleted(); ok {
		_spec.SetField(role.FieldDeleted, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedDeleted(); ok {
		_spec.AddField(role.FieldDeleted, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.ParentID(); ok {
		_spec.SetField(role.FieldParentID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedParentID(); ok {
		_spec.AddField(role.FieldParentID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Intro(); ok {
		_spec.SetField(role.FieldIntro, field.TypeString, value)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
