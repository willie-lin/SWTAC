// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountColumns holds the columns for the "account" table.
	AccountColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "password", Type: field.TypeString, Size: 120},
		{Name: "user_account", Type: field.TypeUUID, Nullable: true},
	}
	// AccountTable holds the schema information for the "account" table.
	AccountTable = &schema.Table{
		Name:       "account",
		Columns:    AccountColumns,
		PrimaryKey: []*schema.Column{AccountColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_user_account",
				Columns:    []*schema.Column{AccountColumns[7]},
				RefColumns: []*schema.Column{UserColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "account_username_phone",
				Unique:  true,
				Columns: []*schema.Column{AccountColumns[3], AccountColumns[5]},
			},
		},
	}
	// GroupColumns holds the columns for the "group" table.
	GroupColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "creator", Type: field.TypeString, Nullable: true},
		{Name: "editor", Type: field.TypeString, Nullable: true},
		{Name: "deleted", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(1,0)", "postgres": "numeric"}},
		{Name: "parent_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "code", Type: field.TypeString},
		{Name: "intro", Type: field.TypeString},
	}
	// GroupTable holds the schema information for the "group" table.
	GroupTable = &schema.Table{
		Name:       "group",
		Columns:    GroupColumns,
		PrimaryKey: []*schema.Column{GroupColumns[0]},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "creator", Type: field.TypeString, Nullable: true},
		{Name: "editor", Type: field.TypeString, Nullable: true},
		{Name: "deleted", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(1,0)", "postgres": "numeric"}},
		{Name: "parent_id", Type: field.TypeInt},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "intro", Type: field.TypeString},
		{Name: "category", Type: field.TypeInt},
		{Name: "url", Type: field.TypeInt},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "creator", Type: field.TypeString, Nullable: true},
		{Name: "editor", Type: field.TypeString, Nullable: true},
		{Name: "deleted", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(1,0)", "postgres": "numeric"}},
		{Name: "parent_id", Type: field.TypeInt},
		{Name: "code", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "intro", Type: field.TypeString},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// UserColumns holds the columns for the "user" table.
	UserColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "nickname", Type: field.TypeString},
		{Name: "avatar", Type: field.TypeString, Nullable: true, Default: "https://example.com/default-avatar.png"},
		{Name: "age", Type: field.TypeInt, Nullable: true, Default: 1},
		{Name: "gender", Type: field.TypeEnum, Nullable: true, Enums: []string{"male", "female", "other"}},
		{Name: "city", Type: field.TypeString, Nullable: true},
		{Name: "introduction", Type: field.TypeString, Nullable: true},
	}
	// UserTable holds the schema information for the "user" table.
	UserTable = &schema.Table{
		Name:       "user",
		Columns:    UserColumns,
		PrimaryKey: []*schema.Column{UserColumns[0]},
	}
	// UserGroupsColumns holds the columns for the "user_groups" table.
	UserGroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "creator", Type: field.TypeString, Nullable: true},
		{Name: "editor", Type: field.TypeString, Nullable: true},
		{Name: "deleted", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(1,0)", "postgres": "numeric"}},
		{Name: "parent_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "code", Type: field.TypeString},
		{Name: "intro", Type: field.TypeString},
	}
	// UserGroupsTable holds the schema information for the "user_groups" table.
	UserGroupsTable = &schema.Table{
		Name:       "user_groups",
		Columns:    UserGroupsColumns,
		PrimaryKey: []*schema.Column{UserGroupsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountTable,
		GroupTable,
		PermissionsTable,
		RolesTable,
		UserTable,
		UserGroupsTable,
	}
)

func init() {
	AccountTable.ForeignKeys[0].RefTable = UserTable
	AccountTable.Annotation = &entsql.Annotation{
		Table: "account",
	}
	GroupTable.Annotation = &entsql.Annotation{
		Table: "group",
	}
	PermissionsTable.Annotation = &entsql.Annotation{
		Table: "permissions",
	}
	RolesTable.Annotation = &entsql.Annotation{
		Table: "roles",
	}
	UserTable.Annotation = &entsql.Annotation{
		Table: "user",
	}
	UserGroupsTable.Annotation = &entsql.Annotation{
		Table: "user_groups",
	}
}
